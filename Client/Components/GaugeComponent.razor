@page "/gauge"
@using Radzen
@using Radzen.Blazor

<!--Bets-->
<div class="container-fluid">
    
    <div class="card">
      <div class="card-body">
        <h1 align="center">Gauge</h1>

             <!--AddButton-->
    <div align="center">
        <button onclick="" type="button" class="btn btn-primary btn-lg">
            Add New Bet
        </button>
      </div>
    </div>

      
    </div>


    <div class="card">
        <div class="container">
    <div class="row">
        <div class="col-sm-12 col-lg-4 my-lg-5 order-lg-last text-center text-lg-left">
            <p>
                <label><span class="d-block mt-3 mb-1">Value</span><RadzenSlider Min="0" Max="260" @bind-Value=@value Style="width: 200px;" /></label>
            </p>
            <p>
                <label><span class="d-block mt-3 mb-1">Tick position</span><RadzenDropDown @bind-Value=@tickPosition Data=@tickPositions Style="width: 200px;" /></label>
            </p>
            <p >
                <label class="mt-3"><RadzenCheckBox @bind-Value=@showValue /> Show the pointer value</label>
            </p>
        </div>
        <div class="col-sm-12 col-lg-8 my-3 my-lg-5">
            <RadzenArcGauge Style="width: 100%; height: 250px;">
                <RadzenArcGaugeScale Step="20" Min="0" Max="260" MinorStep="2" Radius="1.5" TickPosition=@tickPosition Y="0.9" Margin="0">
                    <RadzenArcGaugeScaleValue Value=@value ShowValue=@showValue>
                        <Template Context="pointer">
                            <h4>
                                @pointer.Value <sup>km/h</sup>
                            </h4>
                        </Template>
                    </RadzenArcGaugeScaleValue>
                </RadzenArcGaugeScale>
            </RadzenArcGauge>
        </div>
    </div>
</div>

    </div>
</div>

@code {
        bool showValue = true;
    double value = 100;
    IEnumerable<GaugeTickPosition> tickPositions = Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>();
    GaugeTickPosition tickPosition = GaugeTickPosition.Outside;
}

